<?php
/**
 * @file
 * A light-weight, customizable image gallery plugin for Drupal based on jQuery
 */

/**
 * Implements hook_menu().
 */
function galleria_menu() {
  $items = array();

  $items['admin/config/media/galleria'] = array(
    'title' => 'Galleria',
    'description' => 'Configure Galleria image galleries.',
    'page callback' => 'galleria_page_optionset_list',
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/galleria.admin.inc',
  );
  $items['admin/config/media/galleria/list'] = array(
    'title' => 'Option sets',
    'description' => 'List the current Galleria option sets.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/config/media/galleria/add'] = array(
    'title' => 'Add option set',
    'description' => 'Add a new Galleria option set.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('galleria_form_optionset_add'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 1,
    'file' => 'includes/galleria.admin.inc',
  );
  $items['admin/config/media/galleria/edit/%galleria_optionset'] = array(
    'title' => 'Edit option set',
    'description' => 'Configure an option set.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('galleria_form_optionset_edit', 5),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/galleria.admin.inc',
  );
  $items['admin/config/media/galleria/delete/%galleria_optionset'] = array(
    'title' => 'Delete option set',
    'description' => 'Delete an option set.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('galleria_optionset_form_delete', 5),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/galleria.admin.inc',
  );
  $items['admin/config/media/galleria/advanced'] = array(
    'title' => 'Advanced settings',
    'description' => 'Configure the advanced Galleria module settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('galleria_form_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'includes/galleria.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function galleria_help($path, $arg) {
  switch ($path) {
    case 'admin/config/media/galleria/edit/%':
      return
          '<p>'
        . t('An <em>option set</em> defines exactly how a Galleria image gallery looks like on your site. '
          . 'It is s a combination of <a href="@styles">image styles</a> for the various image sizes, Galleria theme and options.', array('@styles' => url('admin/config/media/image-styles'))). '<br />'
        . t('For a full documentation of all options, refer to the official <a href="@docs">Galleria documentation</a>.', array('@docs' => url('http://galleria.aino.se/docs/1.2/options/')))
        . '</p>';

    case 'admin/config/media/galleria/advanced':
      return '<p>' . t('This page lists some automatically detected files and folders. To improve performance, they are cached until the files get deleted.<br />'
                   . 'If the module behaves strangely, try to clear the cached values below.') . '</p>';
  }
}

/**
 * Implements hook_theme().
 */
function galleria_theme() {
  return array(
   'galleria_container' => array(
      'variables' => array('items' => array(), 'settings' => array()),
      'template' => 'theme/galleria-container',
      'file' => 'theme/theme.inc',
    ),
    'galleria_form_table' => array(
      'render element' => 'form',
      'file' => 'includes/galleria.admin.inc',
    ),
  );
}

/**
 * Implements hook_image_default_styles().
 *
 * Provides default image style presets that can be overridden by site administrators.
 */
function galleria_image_default_styles() {
  $styles = array();

  // image preset for the big image
  $styles['galleria_zoom'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array('width' => 450, 'height' => 300, 'upscale' => 1),
        'weight' => 0,
      ),
    )
  );

  // image preset for thumbnails
  $styles['galleria_thumb'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array('width' => 50, 'height' => 40, 'upscale' => 1),
        'weight' => 0,
      ),
    )
  );

  return $styles;
}

/**
 * Implements hook_views_api().
 *
 * This tells drupal that there is Views integration file named
 * galleria.views.inc
 */
function galleria_views_api() {
  return array(
    'api' => 3,
  );
}


/**
 * Fetches all option sets from the database and returns them as an associative array.
 */
function galleria_optionsets() {
  $optionsets = db_query("SELECT * FROM {galleria_optionset}")->fetchAllAssoc('name', PDO::FETCH_ASSOC);
  foreach ($optionsets as &$optionset) {
    $optionset['options'] = empty($optionset['options']) ? array() : unserialize($optionset['options']);
  }
  return $optionsets;
}

/**
 * Fetches the given option set and returns it as an associative array or FALSE, if no set could be found.
 */
function galleria_optionset_load($optionset_name) {
  $optionset = db_query("SELECT * FROM {galleria_optionset} WHERE name = :name", array(':name' => $optionset_name))->fetchAssoc();
  if ($optionset !== FALSE) {
    $optionset['options'] = empty($optionset['options']) ? array() : unserialize($optionset['options']);
  }
  return $optionset;
}

/**
 * Checks whether an option set with the given name already exists.
 */
function galleria_optionset_exists($optionset_name) {
  return (galleria_optionset_load($optionset_name) !== FALSE);
}

/**
 * Saves the given option set to the database.
 * Set the $new flag if this set has not been written before.
 */
function galleria_optionset_save($optionset, $new = FALSE) {
  $optionset += array(
    'title' => $optionset['name'],
    'options' => array(),
  );

  if ($new) {
    drupal_write_record('galleria_optionset', $optionset);
  }
  else {
    drupal_write_record('galleria_optionset', $optionset, 'name');
  }
  return $optionset;
}

/**
 * Deletes the given option set from the database.
 */
function galleria_optionset_delete($optionset) {
  db_delete('galleria_optionset')->condition('name', $optionset['name'])->execute();
  // TODO: update formatters?
  return TRUE;
}


/*
 * Returns the JavaScript file of the Galleria core.
 * Uses a cached filename until this file gets deleted or the cache gets cleared.
 */
function galleria_get_library_file() {
  $cache = cache_get('galleria_lib_file');
  if (($cache !== FALSE) && file_exists($cache->data))
    return $cache->data;

  // Search for library file
  $libpath = libraries_get_path('galleria');

  // Seach for minimized files first.
  // Sort the found files to use the newest version if there's more than one.
  $js = glob($libpath . '/galleria-*.min.js');
  if (count($js) == 0)
    $js = glob($libpath . '/galleria-*.js');

  if (count($js) > 0) {
    rsort($js);
    cache_set('galleria_lib_file', $js[0]);
    return $js[0];
  }
  else {
    // Could not find JavaScript library
    return FALSE;
  }
}

/**
 * Searches for available themes inside the Galleria folder.
 * The list of themes
 */
function galleria_get_themes($nocache = FALSE) {
  if (!$nocache && (($themes = cache_get('galleria_themes')) !== FALSE))
    return $themes->data;

  $themes = array();

  // Search for theme folders
  $path = libraries_get_path('galleria') . '/themes/';

  if (is_dir($path) && (($path_handle = opendir($path)) !== FALSE)) {
    while (($theme = readdir($path_handle)) !== FALSE) {

      if (!is_dir($path . $theme) || $theme[0] == '.')
        continue;

      // Search for the theme JavaScript file, minified version first
      $js = glob($path . $theme . '/*.min.js');
      if (count($js) == 0)
        $js = glob($path . $theme . '/*.js');

      // Sort by filename to (hopefully) get the newest version.
      if (count($js) > 0) {
        rsort($js);
        $themes[$theme] = $js[0];
      }
    }
    closedir($path_handle);

    cache_set('galleria_themes', $themes);
  }

  return $themes;
}

/**
 * Returns the JavaScript file of the given theme, or FALSE if it could not be found.
 */
function galleria_get_theme_file($theme) {
  $themes = galleria_get_themes();
  return isset($themes[$theme]) ? $themes[$theme] : FALSE;
}


/**
 * Implements hook_field_formatter_info().
 *
 * Adds the Galleria format option within the manage display form of
 * of an image field.
 */
function galleria_field_formatter_info() {
  return array(
    'galleria' => array(
      'label' => t('Galleria'),
      'field types' => array('image', 'node_reference', 'media'),
      'settings' => array(
        'galleria_optionset' => 'default',
        'galleria_reference_img_src' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 *
 * Provides display settings form within the manage display page of
 * an image field with formatter galleria.
 */
function galleria_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $form = array();

  // Show select box for the option set
  $optionsets = array();
  foreach (galleria_optionsets() as $name => $optionset) {
    $optionsets[$name] = check_plain($optionset['title']);
  }
  $form['galleria_optionset'] = array(
    '#title' => t('Option set'),
    '#type' => 'select',
    '#options' => $optionsets,
    '#default_value' => $settings['galleria_optionset'],
  );

  // Show select box for image fields if we're formatting a node_reference field
  if ($field['type'] == 'node_reference') {
    // Find all image fields
    $image_fields = array();
    $fields = field_info_fields();
    $ref_node_types = array_filter($field['settings']['referenceable_types']);
    foreach ($ref_node_types as $ref_node_type) {
      foreach (field_info_instances('node', $ref_node_type) as $field_name => $field_instance) {
        if ($fields[$field_name]['type'] == 'image') {
          $image_fields[$field_name] = $field_name;
        }
      }
    }
    asort($image_fields);

    if (count($image_fields) == 0) {
      drupal_set_message(t('The referenced node type does not contain any valid image field(s).'), 'error');
      return FALSE;
    }
    elseif (count($image_fields) == 1) {
      $keys = array_keys($image_fields);
      $key = $keys[0];
      $form['galleria_reference_img_src'] = array(
        '#type' => 'hidden',
        '#value' => $image_fields[$key],
      );
    }
    elseif (count($image_fields) > 1) {
      $form['galleria_reference_img_src'] = array(
        '#type' => 'select',
        '#title' => t('Image source field of the referenced content type'),
        '#options' => $image_fields,
        '#default_value' => isset($settings['galleria_reference_img_src']) ? $settings['galleria_reference_img_src'] : '', // defaults to classic theme
      );
    }
  }

  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 *
 * Displays the summary of the set options of a Galleria formatted image field
 */
function galleria_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  // Load option set
  if (!empty($settings['galleria_optionset'])) {
    $o = galleria_optionset_load($settings['galleria_optionset']);
    if ($o !== FALSE) {
      $optionset = $o;
    }
  }

  // Build settings summary
  $optionset = isset($optionset) ? $optionset['title'] : t('Default settings');
  $summary[] = t('Option set: %optionset', array('%optionset' => $optionset));

  if (isset($settings['galleria_reference_img_src'])) {
    $summary[] = t('Image field of the referenced node: %field', array('%field' => $settings['galleria_reference_img_src']));
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 *
 * Prepares a renderable array of images and adds the neccessary JS and CSS
 */
function galleria_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if ($field['type'] == 'node_reference') {
    $items = galleria_get_referenced_images($display['settings']['galleria_reference_img_src']);
  }
  elseif ($field['type'] == 'media') {
    $image_items = array();
    foreach ($items as $item) {
      if ($item['file']->type == 'image') {
        $file = (array) $item['file'];
        $file += array('alt' => '', 'title' => '');
        $image_items[] = $file;
      }
    }
    $items = $image_items;
  }

  $element = array();
  if (count($items) > 0) {
    $element[] = array(
      '#theme' => 'galleria_container',
      '#items' => $items,
      '#settings' => $display['settings'],
    );
  }
  return $element;
}

/*
 * This function returns all images of an image field whose name is passed in argument $field
 */
function galleria_get_referenced_images($field) {
  if (empty($field)) {
    drupal_set_message(t('The referenced field does not contain any image field.'), 'error');
    return FALSE;
  }

  $fid_col_name = $field . '_fid';
  $alt_col_name = $field . '_alt';
  $title_col_name = $field . '_title';
  $result = db_query('SELECT ' . $fid_col_name . ',' . $alt_col_name . ',' . $title_col_name . ' FROM {field_data_' . $field . '}');

  $images = array();
  while ($row = $result->fetchAssoc()) {
    $image = (array) file_load($row[$fid_col_name]);
    $image['alt'] = $row[$alt_col_name];
    $image['title'] = $row[$title_col_name];
    $images[] = $image;
  }

  return $images;
}

/*
 * This function loads the required JavaScripts and settings for a Galleria instance.
 */
function galleria_add_js($id, $optionset) {
  // Static array to remember which scripts are already attached.
  $cache = &drupal_static(__FUNCTION__, array());

  // Library JavaScript
  //   Cache this filename to prevent multiple file_exists() calls.
  if (!isset($cache['lib'])) {
    $lib = galleria_get_library_file();
    if ($lib === FALSE) {
      drupal_set_message(t('The Galleria JavaScript file was not found in its path. Please refer to README.txt for installation instructions.'), 'error');
      return;
    }
    $cache['lib'] = $lib;
  }
  drupal_add_js($cache['lib'], array('group' => JS_LIBRARY));

  // Theme
  //   As it's only possible to use one theme per page, use the first one we get for everything.
  if (empty($cache['theme'])) {
    $theme = (!empty($optionset['theme'])) ? $optionset['theme'] : 'classic';
    $theme_file = galleria_get_theme_file($theme);
    if (($theme_file === FALSE) && ($theme !== 'classic')) {
      // Try to fall back to classic theme, the other one might have been deleted.
      $theme_file = galleria_get_theme_file('classic');
    }
    $cache['theme'] = $theme_file;
  }

  // JavaScript settings
  $js_settings = array(
    'themepath' => file_create_url($cache['theme']),
    'optionsets' => array(
      $optionset['name'] => $optionset['options'],
    ),
    'instances' => array(
      'galleria-' . $id => $optionset['name'],
    ),
  );
  drupal_add_js(array('galleria' => $js_settings), 'setting');

  // Loader JavaScript
  drupal_add_js(drupal_get_path('module', 'galleria') . '/js/galleria.load.js');
}
